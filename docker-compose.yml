version: '3.8'

volumes:
  postgres_data: { }

networks:
  backend:
     driver: bridge

#################################
# COMMON CONFS AIRFLOW SERVICES #
#################################
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.1-python3.11
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@airflow-postgresdb:5432/${AIRFLOW_POSTGRES_DB}
    - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__LOGGING__LOGGING_LEVEL=INFO
  volumes:
    - ./dags:/opt/airflow/dags
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/airflow.cfg:/opt/airlfow/airflow.cfg
  depends_on:
    - airflow-postgresdb

services:
  # ####################
  # # AIRFLOW SERVICES #
  # ####################
  airflow-postgresdb:
    image: postgres:12
    environment:
      - POSTGRES_USER=${AIRFLOW_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AIRFLOW_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AIRFLOW_POSTGRES_DB}
      - POSTGRES_PORT=${AIRFLOW_POSTGRES_PORT}
    ports:
      - "${AIRFLOW_POSTGRES_PORT}:5432"
    volumes:
      - ./airflow/postgresql/data:/var/lib/postgresql/data

  airflow-init:
    << : *airflow-common
    container_name: airflow_init
    command: >
      bash -c "airflow db init 
      && airflow users create -r Admin -u ${AIRFLOW_USER_ADMIN} -p ${AIRFLOW_PASSWORD_ADMIN} -e ${AIRFLOW_EMAIL_ADMIN} -f ${AIRFLOW_FNAME_ADMIN} -l ${AIRFLOW_LNAME_ADMIN}"
    restart: on-failure

  airflow-webserver:
    << : *airflow-common
    command: airflow webserver
    ports:
      - ${AIRFLOW_INIT_PORT}:8080
    container_name: airflow_webserver
    restart: always
    depends_on:
      - airflow-init

  airflow-scheduler:
    << : *airflow-common
    command: airflow scheduler
    container_name: airflow_scheduler
    restart: always

  # ##################
  # # KAFKA SERVICES #
  # ##################
  # ############
  # # BROKER 1 #
  # ############
  kafka-0:
    image: 'bitnami/kafka:3.6.1'
    ports:
      - '9092:9092'
      - '9094:9094'
    networks:
      - backend
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@<your_host>:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - './kafka/data:/bitnami/kafka'

  # #############
  # # SUPORT DB #
  # #############
  redis:
    image: redis:7.0.15
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redis/d–∞ta:/root/redis
      # - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PORT=6379
      - REDIS_DATABASES=1

  #################
  # USER SERVICES #
  #################
  DB-USER:
    build: ./postgres/
    image: postgresql-user:1.0
    ports:
      - "${DATABASE_PORT}:5432"
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  INIT-DB:
    build: ./init_db/
    image: init-db:1.0
    ports:
      - "8081:8081"
    environment:
      - DATABASE_HOST=DB-USER
      - DATABASE_PORT=5432
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - SCHEMA_NAME=${SCHEMA_NAME}
    depends_on:
      - DB-USER
    networks:
      - backend
